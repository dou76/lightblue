# Generated by Django 3.2.5 on 2021-12-24 16:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(default='', max_length=20, verbose_name='姓名')),
                ('user_type', models.CharField(default='', max_length=12, verbose_name='用户类型')),
                ('school', models.CharField(default='', max_length=15, verbose_name='学校')),
                ('img_url', models.CharField(default='', max_length=100, verbose_name='头像地址')),
                ('_class', models.CharField(default='', max_length=10, verbose_name='班级')),
                ('register_time', models.DateField(auto_now_add=True, verbose_name='注册时间')),
                ('force_logout_date', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Authentication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authentication', models.CharField(default='', max_length=50, verbose_name='校验码')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='', max_length=20, verbose_name='问题类型')),
                ('title', models.CharField(default='', max_length=30, verbose_name='问题名称')),
                ('abstract', models.CharField(default='', max_length=200, verbose_name='问题摘要')),
                ('state', models.CharField(default='unsolved', max_length=10, verbose_name='问题状态')),
                ('question_time', models.DateTimeField(auto_now_add=True, verbose_name='提问时间')),
                ('is_star', models.BooleanField(default=False, verbose_name='是否加精')),
                ('answerer_id', models.ForeignKey(db_column='answerer_id', default=1, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='answerer_id', to=settings.AUTH_USER_MODEL)),
                ('questioner_id', models.ForeignKey(db_column='questioner_id', default=1, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='questioner_id', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default='', max_length=10, verbose_name='回复类型')),
                ('content', models.CharField(default='', max_length=200, verbose_name='回复内容')),
                ('reply_time', models.DateTimeField(auto_now_add=True, verbose_name='回复时间')),
                ('poster_id', models.ForeignKey(db_column='poster_id', default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('question_id', models.ForeignKey(db_column='question_id', default=1, on_delete=django.db.models.deletion.CASCADE, to='store.question')),
            ],
        ),
        migrations.CreateModel(
            name='Picture_Relation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.ImageField(default='', upload_to='', verbose_name='图片地址')),
                ('reply_id', models.ForeignKey(db_column='reply_id', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='reply_id', to='store.reply')),
            ],
        ),
    ]
